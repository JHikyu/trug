#!/usr/bin/env node
const http=require("http"),https=require("https"),url=require("url"),fs=require("fs"),path=require("path"),argv=require("minimist")(process.argv.slice(2)),colors=require("colors"),ejs=require("ejs"),pug=require("pug"),PORT=!isNaN(argv.port)&&(argv.port||argv.p)||80,HTTPS_PORT=!isNaN(argv.sslport)&&argv.sslport||443,PROJECT_PATH=argv.path||".",ssl=1==argv.ssl?{key:fs.readFileSync(path.join(PROJECT_PATH,"ssl","key.pem")),cert:fs.readFileSync(path.join(PROJECT_PATH,"ssl","cert.pem"))}:{};async function fullServer(n,r){const s=url.parse(n.url,!0)["pathname"];var t=path.join(PROJECT_PATH,"views",s,"/"===s?"index":"");if("/favicon.ico"===s&&fs.existsSync(path.join(PROJECT_PATH,"public","favicon.ico")))return r.setHeader("Content-Type","image/x-icon"),void fs.createReadStream(path.join(PROJECT_PATH,"public","favicon.ico")).pipe(r);log(`request on ${s} checking `+t);const i=fileExtension(t)??fileExtension(path.join(t,"index"));var e=!fileExtension(t);if(!i)return fs.existsSync(path.join(PROJECT_PATH,"public",s))?(log(`serving ${s} from public folder`),r.setHeader("Content-Type","text/html"),void fs.createReadStream(path.join(PROJECT_PATH,"public",s)).pipe(r)):(log((s+" not found").underline),r.writeHead(404,{"Content-Type":"text/plain"}),void r.end(`Cannot ${n.method} `+n.url));const o=t+(e?"\\index":"")+"."+i;log((o+" found").underline);t+=e?"\\index":"";let l;if(fs.existsSync(t+".js")){try{l=await require(path.resolve(t+".js"))()}catch(e){log(`Error running script ${t}.js`.red),log(e.stack.red)}log((t+" found").underline)}fs.readFile(o,(e,t)=>e?(log((s+" not found").underline),r.writeHead(404,{"Content-Type":"text/plain"}),void r.end(`Cannot ${n.method} `+n.url)):(r.writeHead(200,{"Content-Type":"text/html"}),void("pug"===i?(fn=pug.compile(t,{filename:o,pretty:!0}),r.end(fn(l?.data))):"ejs"===i?(fn=ejs.compile(o.toString()),r.end(fn(l?.data))):"html"===i?r.end(t):r.end(""))))}function fileExtension(e){return fs.existsSync(e+".pug")?"pug":fs.existsSync(e+".html")?"html":fs.existsSync(e+".ejs")?"ejs":void 0}function log(e){console.log("[LOG]".bgGray,e.grey)}log("Booting Trug 🧺 in "+PROJECT_PATH),log("Checking project folders..."),log(`views folder: ${PROJECT_PATH}/views `+(fs.existsSync(PROJECT_PATH+"/views")?"✓":"✗")),log(`public folder: ${PROJECT_PATH}/public `+(fs.existsSync(PROJECT_PATH+"/public")?"✓":"✗")),log(`src folder: ${PROJECT_PATH}/src `+(fs.existsSync(PROJECT_PATH+"/src")?"✓":"✗")),fs.existsSync(PROJECT_PATH+"/views")&&fs.existsSync(PROJECT_PATH+"/public")&&fs.existsSync(PROJECT_PATH+"/src")||(log("Project not setup correctly. Please run ".red+"`trug-init`".yellow+" to setup your project.".red),process.exit(1)),ssl.key&&https.createServer(ssl,async(e,t)=>{fullServer(e,t)}).listen(HTTPS_PORT,()=>{console.log(`Trug 🧺 is running on port ${HTTPS_PORT} 👍 via ssl!`.green.bold)}),http.createServer(async(e,t)=>{fullServer(e,t)}).listen(PORT,()=>{console.log(`Trug 🧺 is running on port ${PORT} 👍`.green.bold)}),async function e(t,n){if(fs.existsSync(t))for(var r=fs.readdirSync(t),s=0;s<r.length;s++){var i=path.join(t,r[s]);(await fs.lstatSync(i)).isDirectory()?e(i,n):i.endsWith(n)&&(log("watching "+i),fs.watchFile(path.resolve(i),()=>{log((i+" changed").yellow),delete require.cache[path.resolve(i)]}))}}(path.join(PROJECT_PATH),".js");